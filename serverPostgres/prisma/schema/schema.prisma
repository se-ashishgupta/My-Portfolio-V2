// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "driverAdapters", "prismaSchemaFolder", "omitApi"]
}

model User {
  id             Int             @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String          @unique
  mobile         String          @unique
  password       String
  role           String          @default("admin")
  about          String?
  thought        String?
  experience     Int?
  address        Address?
  avatar         Avatar?
  titles         Titles[]
  projects       Project[]
  socialLinks    SocialLinks?
  dashboardStats DashboardStats?

  // Password reset fields
  resetPasswordToken  String?
  resetPasswordExpire String?

  //  Time Stamp 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Avatar {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  publicId  String    @map("public_id") // Maps to public_id in the database
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Titles {
  id     Int    @id @default(autoincrement())
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  title  String
}

model SocialLinks {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkedin  String?
  github    String?
  facebook  String?
  twitter   String?
  instagram String?
  youtube   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id         Int     @id @default(autoincrement())
  userId     Int     @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  street     String?
  city       String?
  state      String?
  postalCode String?
  country    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
